{"version":3,"sources":["~classes/HashFactory.js","~components/code-display/copy-button.js","~components/code-display/code-display.js","~components/code-display/index.js","~code-samples/index.js","~components/append-meta/index.js","~code-samples/api-auto-detect/index.js","~code-samples/api-init/index.js","~code-samples/api-init-react/index.js","~code-samples/api-langmap/index.js","~code-samples/api-localize/index.js","~code-samples/api-logs-focus/index.js","~code-samples/api-set-language/index.js","~code-samples/api-set-dictionary/index.js","~code-samples/api-use-lang/index.js","~code-samples/api-with-lang/index.js","~code-samples/casings/index.js","~code-samples/dictionary-primary-example/index.js","~code-samples/dictionary-secondary-example/index.js","~code-samples/dictionary-index-example/index.js","~code-samples/folder-structure/index.js","~code-samples/home-demo/index.js","~code-samples/install-using-npm/index.js","~code-samples/install-using-yarn/index.js","~code-samples/paramarray/index.js","~code-samples/paramarray-dictionary/index.js","~code-samples/paramobject/index.js","~code-samples/paramobject-dictionary/index.js","~code-samples/switching-languages/index.js","~code-samples/transformations/index.js","~code-samples/usage/index.js"],"names":["HashMaker","blacklist","this","used","charset","STRINGS","defaultHashCharset","length","newHash","charsetToUse","Set","split","join","getSanitizedCharset","count","getRandomString","includes","Error","push","hash","indexOfHashInUsed","indexOf","splice","CopyButton","onClick","copied","useTheme","code","palette","misc","type","isCompactWidth","useMediaQuery","className","style","backgroundColor","copyButtonBg","border","color","copyButtonFg","height","paddingLeft","paddingRight","children","localize","keyword","casing","idTracker","HashFactory","CodeDisplayBase","modStyles","light","dark","extractCode","props","childrenToUse","Array","isArray","output","i","id","componentId","extracted","document","getElementById","innerText","e","console","error","handleCopy","codeToCopy","copy","showCopied","window","alert","setState","timeoutRef","setTimeout","createHash","state","unregisterHash","clearTimeout","title","startLineFrom","mode","theme","modArray","lineArray","codeArray","padArray","_children","modType","mod","key","paddingInlineStart","paddingInlineEnd","CodeDisplayContainer","CodeDisplayToolbarContainer","CodeDisplayContentContainer","React","Component","CodeDisplay","withTheme","propTypes","PropTypes","string","node","number","oneOf","editorBg","editorFg","titleBarBg","titleBarFg","useCodeTheme","Com","comment","Key","Var","variable","Def","definition","Str","Rgx","regex","Rgxe","regexEsc","Type","Func","function","Ang","angular","Mark","mark","borderRadius","paddingBlockStart","paddingBlockEnd","Line","indent","repeat","LineAdd","CodeSamples","ApiAutoDetect","require","ApiInit","ApiInitReact","ApiLangmap","ApiLocalize","ApiLogsFocus","ApiSetLanguage","ApiSetDictionary","ApiUseLang","ApiWithLang","Casings","DictionaryPrimaryExample","DictionarySecondaryExample","DictionaryIndexExample","FolderStructure","HomeDemo","InstallUsingNpm","InstallUsingYarn","ParamArray","ParamArrayDictionary","ParamObject","ParamObjectDictionary","SwitchingLanguages","Transformations","Usage","index","Object","keys","default","module","exports","DEFAULT_TITLE","DEFAULT_DESC","AppendMeta","desc","useLayoutEffect","_title","getElementsByTagName","content","useEffectTitle","useEffectDesc","transform","withProps","dect","add","rn","lang2","value2","name1","SafeKey","text","match","primaryLang","secondaryLang","name2","val","replace"],"mappings":"sOAkCeA,E,WA7Bb,aAA6B,IAAjBC,EAAgB,uDAAJ,GAAI,oBAC1BC,KAAKC,KAAOF,EACZC,KAAKE,QAAUC,UAAQC,mB,uDAGdC,EAAQH,GACjB,IAEII,EAFEC,EAAkC,kBAAZL,EAyBhC,SAA6BA,GAC3B,OAAO,YAAI,IAAIM,IAAIN,EAAQO,MAAM,MAAMC,KAAK,IA1BSC,CAAoBT,GAAWF,KAAKE,QAE1EU,EAAQ,EACrB,GACEN,EAAUO,YAAgBR,EAAQE,SAC3BP,KAAKC,KAAKa,SAASR,IAAYM,IAJrB,IAKnB,GAAIZ,KAAKC,KAAKa,SAASR,GACrB,MAAMS,MAAM,gEAId,OADAf,KAAKC,KAAKe,KAAKV,GACRA,I,qCAGMW,GACb,IAAMC,EAAoBlB,KAAKC,KAAKkB,QAAQF,GACxCC,GAAqB,GACvBlB,KAAKC,KAAKmB,OAAOF,EAAmB,O,kCCe3BG,MArCf,YAA0C,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAAU,EACOC,cAAnBC,EADY,EAC/BC,QAAWC,KAAQF,KAAUG,EADE,EACFA,KAC/BC,EAAiBC,YAAc,sBACrC,OACE,4BACEC,UAAU,2BACVT,QAASA,EACTU,MAAO,CACLC,gBAAiBV,EAAS,cAAgBE,EAAKS,aAC/CC,OAAQZ,EAAM,oBAAyB,SAATK,EAAkB,UAAY,WAAc,GAC1EQ,MAAOX,EAAKY,aACZC,OAAQT,EAAiB,GAAK,OAC9BU,YAAaV,EAAiB,MAAQ,EACtCW,aAAcX,EAAiB,MAAQ,IAGzC,yBACEE,UAAU,+BACVC,MAAO,CACLI,MAAOb,EAAmB,SAATK,EAAkB,UAAY,UAAa,KAG9D,uBACEG,UAAU,+CACVU,SAAUlB,EAAS,OAAS,cAE7BmB,mBAAS,CAAEC,QAASpB,EAAS,SAAW,OAAQqB,OAAQ,iBCvB7DC,EAAY,IAAIC,EAEdC,E,YAEJ,aAAe,IAAD,8BACZ,+CAOFC,UAAY,CACVC,MAAO,CACL,IAAK,CAAEhB,gBAAiB,YAAaG,MAAO,WAC5C,IAAK,CAAEH,gBAAiB,YAAaG,MAAO,WAC5C,IAAK,CAAEH,gBAAiB,YAAaG,MAAO,cAE9Cc,KAAM,CACJ,IAAK,CAAEjB,gBAAiB,YAAaG,MAAO,WAC5C,IAAK,CAAEH,gBAAiB,YAAaG,MAAO,WAC5C,IAAK,CAAEH,gBAAiB,YAAaG,MAAO,eAjBlC,EA0Bde,YAAc,WACZ,IAIE,IAJG,IACKV,EAAa,EAAKW,MAAlBX,SACJY,EAAgBC,MAAMC,QAAQd,GAAYA,EAAW,CAACA,GACtDe,EAAS,GACJC,EAAI,EAAGA,EAAIJ,EAAchD,OAAQoD,IAAK,CAC7C,IAAMC,EAAE,uBAAmB,EAAKC,YAAxB,YAAuCF,GACzCG,EAAYC,SAASC,eAAeJ,GAAIK,UAC9CP,GAAwB,MAAdI,EAAoB,GAAKA,EACjB,OAAdA,IAAsBJ,GAAU,MAEtC,OAAOA,EACP,MAAOQ,GAEP,OADAC,QAAQC,MAAMF,GACP,KAxCG,EA4CdG,WAAa,WACX,IAAMC,EAAa,EAAKjB,cAExB,IACEkB,IAAKD,GACL,EAAKE,aACL,MAAON,GACPO,OAAOC,MAAM9B,mBAAS,qBAnDZ,EAuDd4B,WAAa,WACX,EAAKG,SAAS,CAAElD,QAAQ,IACxB,EAAKmD,WAAaC,YAAW,WAC3B,EAAKF,SAAS,CAAElD,QAAQ,MACvB,OAzDH,EAAKoC,YAAcd,EAAU+B,WAAW,GACxC,EAAKC,MAAQ,CACXtD,QAAQ,GAJE,E,oFAsBZsB,EAAUiC,eAAe9E,KAAK2D,aAC9BoB,aAAa/E,KAAK0E,c,+BA8ClB,IAPQ,IAAD,EACkE1E,KAAKoD,MAAtE4B,EADD,EACCA,MADD,IACQvC,gBADR,MACmB,GADnB,MACuBwC,qBADvB,MACuC,EADvC,MAC0CC,YAD1C,MACiD,MADjD,EACwDC,EADxD,EACwDA,MAC3DC,EAAW,GAAIC,EAAY,GAAIC,EAAY,GAAIC,EAAW,GAGxDC,EAAYlC,MAAMC,QAAQd,GAAYA,EAAW,CAACA,GAE/CgB,EAAI,EAAGA,EAAI+B,EAAUnF,OAAQoD,IAAK,CAGzC,IAAMgC,EAAUD,EAAU/B,GAAG7B,KAAK8D,IAHO,EAIN1F,KAAKgD,UAAUmC,EAAMvD,MAAM6D,IAAY,GAAlExD,EAJiC,EAIjCA,gBAAiBG,EAJgB,EAIhBA,MAEZ,QAAT8C,GACFE,EAASpE,KACP,yBAAK2E,IAAG,aAAQlC,GACd1B,UAAU,8BACVC,MAAO,CACLI,MAAO,CAAC,IAAK,KAAKtB,SAAS2E,GAAWrD,EAAQ,cAC9CH,kBACA2D,mBAAoB,IAEtBnD,SAAUgD,GAAW,YAKvB,CAAC,MAAO,QAAQ3E,SAASoE,IAC3BG,EAAUrE,KACR,yBACE2E,IAAG,cAASlC,GACZ1B,UAAU,8BACVC,MAAO,CACLC,kBACA2D,mBAAoB,GACpBC,iBAAkB,KAGnBpC,EAAIwB,IAKXK,EAAUtE,KACR,yBACE2E,IAAG,cAASlC,GACZC,GAAE,uBAAkB1D,KAAK2D,YAAvB,YAAsCF,GACxC1B,UAAU,4DACVC,MAAO,CAAEC,oBAERuD,EAAU/B,KAIf8B,EAASvE,KACP,yBACE2E,IAAG,aAAQlC,GACXzB,MAAO,CAAEI,MAAO,cAAeH,mBAC/BF,UAAU,8BACVU,SAAU,OA3DT,IAiEClB,EAAWvB,KAAK6E,MAAhBtD,OAER,OACE,kBAACuE,EAAD,KACE,kBAACC,EAAD,KACE,uBAAGhE,UAAU,kBAAkBU,SAAUuC,IACzC,kBAAC,EAAD,CAAY1D,QAAStB,KAAKmE,WAAY5C,OAAQA,KAEhD,kBAACyE,EAAD,KAGE,yBAAKjE,UAAU,mCACb,yBAAKA,UAAU,gBAAgBU,SAAU2C,KAI3C,yBACErD,UAAU,mCACVC,MAAO,CACLI,MAAsB,SAAf+C,EAAMvD,KAAkB,YAAc,cAG/C,yBAAKG,UAAU,gBAAgBU,SAAU4C,KAI3C,yBAAKtD,UAAU,oCACb,yBAAKA,UAAU,sBACZuD,IAKL,6BACE,yBAAKvD,UAAU,gBAAgBU,SAAU8C,W,GAnKvBU,IAAMC,WAgL9BC,EAAcC,YAAUrD,GAE9BoD,EAAYE,UAAY,CACtBrB,MAAOsB,IAAUC,OACjB9D,SAAU6D,IAAUE,KACpBvB,cAAeqB,IAAUG,OACzBvB,KAAMoB,IAAUI,MAAM,CAAC,OAAQ,OAAQ,SAG1BP,QAEf,SAASL,EAAT,GAA6C,IAAbrD,EAAY,EAAZA,SACHhB,EAAaD,cAAhCE,QAAWC,KAAQF,KAC3B,OACE,yBACEM,UAAU,sBACVU,SAAUA,EACVT,MAAO,CACLC,gBAAiBR,EAAKkF,YAM9B,SAASX,EAAT,GAAoD,IAAbvD,EAAY,EAAZA,SACVhB,EAAaD,cAAhCE,QAAWC,KAAQF,KAC3B,OACE,yBACEM,UAAU,8BACVU,SAAUA,EACVT,MAAO,CACLI,MAAOX,EAAKmF,YAMpB,SAASb,EAAT,GAAoD,IAAbtD,EAAY,EAAZA,SACVhB,EAAaD,cAAhCE,QAAWC,KAAQF,KAC3B,OACE,yBACEM,UAAU,8BACVU,SAAUA,EACVT,MAAO,CACLC,gBAAiBR,EAAKoF,WACtBzE,MAAOX,EAAKqF,c,OCxOpB,0bAMA,SAASC,IAAiB,OAAOvF,cAAWE,QAAQC,KAAKF,KAElD,IAAMuF,EAAM,SAAC,GAAD,IAAGvE,EAAH,EAAGA,SAAH,OACjB,0BAAMA,SAAUA,EAAUT,MAAO,CAAEI,MAAO2E,IAAeE,YAG9CC,EAAM,SAAC,GAAD,IAAGzE,EAAH,EAAGA,SAAH,OACjB,0BAAMA,SAAUA,EAAUT,MAAO,CAAEI,MAAO2E,IAAepE,YAG9CwE,EAAM,SAAC,GAAD,IAAG1E,EAAH,EAAGA,SAAH,OACjB,0BAAMA,SAAUA,EAAUT,MAAO,CAAEI,MAAO2E,IAAeK,aAG9CC,EAAM,SAAC,GAAD,IAAG5E,EAAH,EAAGA,SAAH,OACjB,0BAAMA,SAAUA,EAAUT,MAAO,CAAEI,MAAO2E,IAAeO,eAW9CC,EAAM,SAAC,GAAD,IAAG9E,EAAH,EAAGA,SAAH,OACjB,0BAAMA,SAAUA,EAAUT,MAAO,CAAEI,MAAO2E,IAAeR,WAO9CiB,EAAM,SAAC,GAAD,IAAG/E,EAAH,EAAGA,SAAH,OACjB,0BAAMA,SAAUA,EAAUT,MAAO,CAAEI,MAAO2E,IAAeU,UAG9CC,EAAO,SAAC,GAAD,IAAGjF,EAAH,EAAGA,SAAH,OAClB,0BAAMA,SAAUA,EAAUT,MAAO,CAAEI,MAAO2E,IAAeY,aAO9CC,EAAO,SAAC,GAAD,IAAGnF,EAAH,EAAGA,SAAH,OAClB,0BAAMA,SAAUA,EAAUT,MAAO,CAAEI,MAAO2E,IAAenF,SAG9CiG,EAAO,SAAC,GAAD,IAAGpF,EAAH,EAAGA,SAAH,OAClB,0BAAMA,SAAUA,EAAUT,MAAO,CAAEI,MAAO2E,IAAee,aAG9CC,EAAM,SAAC,GAAD,IAAGtF,EAAH,EAAGA,SAAH,OACjB,0BAAMA,SAAUA,EAAUT,MAAO,CAAEI,MAAO2E,IAAeiB,YAG9CC,EAAO,SAAC,GAAD,IAAGxF,EAAH,EAAGA,SAAH,OAClB,0BACEA,SAAUA,EACVT,MAAO,CACLC,gBAAiB8E,IAAemB,KAChCC,aAAc,SACdC,kBAAmB,SACnBC,gBAAiB,SACjBzC,mBAAoB,QACpBC,iBAAkB,YAKXyC,EAAO,SAAC,GAAD,QAAG7F,gBAAH,MAAc,6BAAd,MAAsB8F,cAAtB,MAA+B,EAA/B,SAClB,oCAAG,IAAIC,OAAO,EAAID,GAAS9F,GAAsB,MAQtCgG,EAAU,SAAC,GAAD,IAAGhG,EAAH,EAAGA,SAAH,IAAa8F,cAAb,MAAsB,EAAtB,SACrB,oCAAG,IAAIC,OAnFY,EAmFUD,GAAS9F,GAAsB,MAE9DgG,EAAQ/C,IAAM,IAeCS,O,oBCzEb,IAhCF,IACIuC,EAAc,CAEhBC,cAAeC,EAAQ,KACvBC,QAASD,EAAQ,KACjBE,aAAcF,EAAQ,KACtBG,WAAYH,EAAQ,KACpBI,YAAaJ,EAAQ,KACrBK,aAAcL,EAAQ,KACtBM,eAAgBN,EAAQ,KACxBO,iBAAkBP,EAAQ,KAC1BQ,WAAYR,EAAQ,KACpBS,YAAaT,EAAQ,KACrBU,QAASV,EAAQ,KACjBW,yBAA0BX,EAAQ,KAClCY,2BAA4BZ,EAAQ,KACpCa,uBAAwBb,EAAQ,KAChCc,gBAAiBd,EAAQ,KACzBe,SAAUf,EAAQ,KAClBgB,gBAAiBhB,EAAQ,KACzBiB,iBAAkBjB,EAAQ,KAC1BkB,WAAYlB,EAAQ,KACpBmB,qBAAsBnB,EAAQ,KAC9BoB,YAAapB,EAAQ,KACrBqB,sBAAuBrB,EAAQ,KAC/BsB,mBAAoBtB,EAAQ,KAC5BuB,gBAAiBvB,EAAQ,KACzBwB,MAAOxB,EAAQ,MAITyB,EAAQC,OAAOC,KAAK7B,GACjBjF,EAAI,EAAGA,EAAI4G,EAAMhK,OAAQoD,IAChCiF,EAAY2B,EAAM5G,IAAMiF,EAAY2B,EAAM5G,IAAI+G,QAIlDC,EAAOC,QAAUhC,G,iCCrCjB,WAEMiC,EAAgB,WAChBC,EAAe,0CAQNC,IANf,YAAsC,IAAhB7F,EAAe,EAAfA,MAAO8F,EAAQ,EAARA,KAG3B,OAKF,SAAwB9F,GACtB+F,2BAAgB,WACd,IAAMC,EAASL,GAAkC,kBAAV3F,EAAP,aAAkCA,GAAU,IAC5E,IACEnB,SAASmB,MAAQgG,EACjBnH,SAASoH,qBAAqB,QAAQ,YAAYC,QAAUF,EAC5D,MAAOhH,OACR,CAACgB,IAdJmG,CAAenG,GAiBjB,WAA6C,IAAtB8F,EAAqB,uDAAdF,EAC5BG,2BAAgB,WACd,IACElH,SAASoH,qBAAqB,QAA9B,YAAqDC,QAAUJ,EAC/DjH,SAASoH,qBAAqB,QAAQ,kBAAkBC,QAAUJ,EAClE,MAAO9G,OACR,CAAC8G,IAtBJM,CAAcN,GACP,O,iCCRT,kDAoCenC,UA/BO,kBACpB,kBAAC,IAAD,CAAa3D,MAAOtC,mBAAS,iBAAkB,CAAC,iBAC9C,kBAAC,IAAD,KACE,kBAAC,IAAD,kBAAYA,mBAAS,UAEvB,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACqB,KAAK,kBAAC,IAAD,aAD1B,KAC2C,kBAAC,IAAD,oBAD3C,KACmE,kBAAC,IAAD,oBAAuB,KAD1F,IACgG,kBAAC,IAAD,aADhG,IACgH,kBAAC,IAAD,oBAEhH,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAM,MAAOA,mBAAS,CACpBC,QAAS,iCACT0I,UAAWC,YAAU,CAAEC,KAAM,cAAeC,IAAK,qBAAwBC,GAAI,qBAGjF,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACqB,KAAK,kBAAC,IAAD,oBAAuB,KADjD,IACuD,kBAAC,IAAD,aADvD,IACuE,kBAAC,IAAD,qCAEvE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,kBAAY/I,mBAAS,mCAEvB,kBAAC,IAAD,KACE,kBAAC,IAAD,aADF,IACoB,kBAAC,IAAD,mBADpB,KAC2C,kBAAC,IAAD,SAAOA,mBAAS,qBAAhB,KAD3C,KACyF,kBAAC,IAAD,oBADzF,KAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,oBADF,IAC2B,kBAAC,IAAD,SAAOA,mBAAS,qBAAhB,KAD3B,KACyE,kBAAC,IAAD,oBADzE,Q,uDC9BJ,2CAqBemG,UAjBC,kBACd,kBAAC,IAAD,CACE7D,MAAOtC,mBAAS,iBAAkB,CAAC,YAEnC,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACoB,kBAAC,IAAD,iBADpB,KAC0C,IAD1C,IAC+C,kBAAC,IAAD,iBAD/C,KACoE,kBAAC,IAAD,KAAM,kBAAC,IAAD,qBAD1E,IACyG,IADzG,IAC8G,kBAAC,IAAD,aAD9G,IAC8H,kBAAC,IAAD,oBAE9H,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACoB,kBAAC,IAAD,mBADpB,IAC0C,kBAAC,IAAD,aAD1C,IAC0D,kBAAC,IAAD,2BAE1D,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,iBADF,IACsB,kBAAC,IAAD,aADtB,IACwC,kBAAC,IAAD,mBADxC,KAC+D,kBAAC,IAAD,SAAOA,mBAAS,qBAAhB,KAD/D,KAC6G,kBAAC,IAAD,KAAM,kBAAC,IAAD,qBADnH,Q,iCCfJ,2CAqCemG,UA/BC,kBACd,kBAAC,IAAD,CAAa7D,MAAOtC,mBAAS,uBAAwB,CAAC,YACpD,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACoB,kBAAC,IAAD,cADpB,IACqC,kBAAC,IAAD,aADrC,IACqD,kBAAC,IAAD,iBAErD,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACoB,kBAAC,IAAD,iBADpB,KAC0C,IAD1C,IAC+C,kBAAC,IAAD,iBAD/C,KACoE,kBAAC,IAAD,oBADpE,IAC4F,IAD5F,IACiG,kBAAC,IAAD,aADjG,IACiH,kBAAC,IAAD,oBAEjH,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACoB,kBAAC,IAAD,mBADpB,IAC0C,kBAAC,IAAD,aAD1C,IAC0D,kBAAC,IAAD,2BAE1D,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACoB,kBAAC,IAAD,aADpB,IACoC,kBAAC,IAAD,aADpC,IACoD,kBAAC,IAAD,sBAEpD,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACoB,kBAAC,IAAD,uBAEpB,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,iBADF,IACsB,kBAAC,IAAD,aADtB,IACwC,kBAAC,IAAD,mBADxC,KAC+D,kBAAC,IAAD,SAAOA,mBAAS,qBAAhB,KAD/D,KAC6G,kBAAC,IAAD,oBAD7G,KAGA,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,iBADF,IACsB,kBAAC,IAAD,YADtB,OAC2C,KAE3C,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,KAAM,c,iCChCZ,2CAqCeQ,UAjCI,WACjB,IAAM2C,EAAQhJ,mBAAS,uBAEjBiJ,EAASjJ,mBAAS,8BACxB,OACE,kBAAC,IAAD,CAAasC,MAAOtC,mBAAS,iBAAkB,CAAC,eAC9C,kBAAC,IAAD,KACE,kBAAC,IAAD,oBADF,IAC2B,kBAAC,IAAD,SAAOA,mBAAS,qBAAhB,KAD3B,KAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,iBADF,IACwB,kBAAC,IAAD,SARZ,QAQY,KADxB,IAEE,kBAAC,IAAD,KAAM,OAAQA,mBAAS,8BAEzB,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,SAAOgJ,EAAP,KADvB,KAC6C,kBAAC,IAAD,SAZjC,QAYiC,KAD7C,IAEE,kBAAC,IAAD,mBAAaC,KAEf,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACwB,KAExB,kBAAC,IAAD,CAAMpD,OAAQ,GACZ,kBAAC,IAAD,aADF,KACmB,kBAAC,IAAD,SAAOmD,EAAP,KADnB,KAGA,kBAAC,IAAD,CAAMnD,OAAQ,GACZ,kBAAC,IAAD,gBADF,KACsB,kBAAC,IAAD,SAtBV,QAsBU,MAEtB,kBAAC,IAAD,WACK,kBAAC,IAAD,kBAAYoD,Q,iCC/BvB,2CAgDezC,UA5CQ,WACrB,OACE,kBAAC,IAAD,CAAalE,MAAOtC,mBAAS,iBAAkB,CAAC,gBAC9C,kBAAC,IAAD,KACE,kBAAC,IAAD,kBAAYA,mBAAS,oBAEvB,kBAAC,IAAD,KACE,kBAAC,IAAD,iBADF,IACwB,kBAAC,IAAD,kBADxB,MAC+C,kBAAC,IAAD,SAAOA,mBAAS,kBAAhB,KAD/C,MAC2F,kBAAC,IAAD,oBAD3F,MACoH,kBAAC,IAAD,YADpH,KACoI,kBAAC,IAAD,WADpI,IACkJ,kBAAC,IAAD,YADlJ,IACiK,kBAAC,IAAD,gBADjK,IACsL,kBAAC,IAAD,SAAM,kBAAC,IAAD,UAAN,QAAyB,kBAAC,IAAD,UAAzB,KAA8C,kBAAC,IAAD,WADpO,KACmP,kBAAC,IAAD,YADnP,KAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,iBADF,IACwB,kBAAC,IAAD,kBADxB,KAC+C,KAAK,kBAAC,IAAD,YADpD,KACoE,kBAAC,IAAD,SAAOA,mBAAS,kBAAhB,KAA0C,KAD9G,KACqH,kBAAC,IAAD,oBADrH,MAC8I,kBAAC,IAAD,YAD9I,KAC8J,kBAAC,IAAD,WAD9J,IAC4K,kBAAC,IAAD,YAD5K,IAC2L,kBAAC,IAAD,gBAD3L,IACgN,kBAAC,IAAD,SAAM,kBAAC,IAAD,UAAN,QAAyB,kBAAC,IAAD,UAAzB,KAA8C,kBAAC,IAAD,WAD9P,KAC6Q,kBAAC,IAAD,YAD7Q,KAGA,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,kBAAYA,mBAAS,yBAEvB,kBAAC,IAAD,KACE,kBAAC,IAAD,iBADF,IACyB,KAEzB,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,gBADF,KACsB,kBAAC,IAAD,mBAEtB,kBAAC,IAAD,CAAMA,OAAQ,GACZ,kBAAC,IAAD,cADF,MACqB,kBAAC,IAAD,SAAO7F,mBAAS,kBAAhB,KADrB,KAGA,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,kBAAY7F,mBAAS,KAAM,KAAM,gBAEnC,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,cADF,KACqB,KAAK,kBAAC,IAAD,YAD1B,KAC0C,kBAAC,IAAD,SAAO7F,mBAAS,kBAAhB,KAA0C,MAEpF,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,eADF,KACqB,kBAAC,IAAD,qBAErB,kBAAC,IAAD,CAAMA,OAAQ,GACZ,kBAAC,IAAD,kBADF,MACyB,kBAAC,IAAD,YADzB,KACyC,kBAAC,IAAD,WADzC,IACuD,kBAAC,IAAD,YADvD,IACsE,kBAAC,IAAD,gBADtE,IAC2F,kBAAC,IAAD,SAAM,kBAAC,IAAD,UAAN,QAAyB,kBAAC,IAAD,UAAzB,KAA8C,kBAAC,IAAD,WADzI,KACwJ,kBAAC,IAAD,YADxJ,KAGA,kBAAC,IAAD,KACG,S,iCC1CT,2CAgCeU,UA5BM,kBACnB,kBAAC,IAAD,CAAajE,MAAOtC,mBAAS,iBAAkB,CAAC,kBAC9C,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACqB,KAAK,kBAAC,IAAD,aAAgB,KAD1C,IACgD,kBAAC,IAAD,aADhD,IACgE,kBAAC,IAAD,oBAEhE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,YADF,IACiB,kBAAC,IAAD,+BADjB,MACqD,kBAAC,IAAD,aADrD,IACqE,kBAAC,IAAD,cADrE,OAC2F,kBAAC,IAAD,WAD3F,IAC0G,KAE1G,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,kBAAY7F,mBAAS,qBAEvB,kBAAC,IAAD,KACG,MAEH,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,WADF,MACkB,kBAAC,IAAD,+BADlB,KACsD,KAEtD,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,yBADF,MAGA,kBAAC,IAAD,KACG,Q,iCC3BP,2CAuCeW,UAnCQ,WACrB,OACE,kBAAC,IAAD,CAAalE,MAAOtC,mBAAS,iBAAkB,CAAC,mBAC9C,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAM,KAAU,kBAAC,IAAD,eAAiB,kBAAC,IAAD,KAAM,MAEzC,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,KAAM,KACN,kBAAC,IAAD,eAFF,IAEoB,kBAAC,IAAD,gBAFpB,IAEwC,OAAO,kBAAC,IAAD,WAAc,MAC3D,kBAAC,IAAD,oBAHF,IAIG,kBAAC,IAAD,SAAO7F,mBAAS,qBAAhB,KAJH,IAKG,MAAM,kBAAC,IAAD,KAAM,MAEf,kBAAC,IAAD,CAAM6F,OAAQ,GAAI7F,mBAAS,2BAC3B,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,KAAM,MAAW,kBAAC,IAAD,eAAiB,kBAAC,IAAD,KAAM,MAE1C,kBAAC,IAAD,CAAMA,OAAQ,GACZ,kBAAC,IAAD,KAAM,KACN,kBAAC,IAAD,eAFF,IAEoB,kBAAC,IAAD,gBAFpB,IAEwC,OAAO,kBAAC,IAAD,WAAc,MAC3D,kBAAC,IAAD,oBAHF,IAIG,kBAAC,IAAD,SAAO7F,mBAAS,uBAAhB,KAJH,IAKG,MAAM,kBAAC,IAAD,KAAM,MAEf,kBAAC,IAAD,CAAM6F,OAAQ,GAAI7F,mBAAS,6BAC3B,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,KAAM,MAAW,kBAAC,IAAD,eAAiB,kBAAC,IAAD,KAAM,MAE1C,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAM,MAAW,kBAAC,IAAD,eAAiB,kBAAC,IAAD,KAAM,S,iCCjChD,2CAiBeW,UAbQ,WACrB,OACE,kBAAC,IAAD,CAAalE,MAAOtC,mBAAS,iBAAkB,CAAC,qBAC9C,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACoB,kBAAC,IAAD,mBADpB,IAC0C,kBAAC,IAAD,aAD1C,IAC0D,kBAAC,IAAD,2BAE1D,kBAAC,IAAD,KACE,kBAAC,IAAD,iBADF,IACsB,kBAAC,IAAD,sBADtB,IACiD,kBAAC,IAAD,mBADjD,Q,iCCVN,2CAuBe0G,UAnBI,WACjB,OACE,kBAAC,IAAD,CAAapE,MAAOtC,mBAAS,iBAAkB,CAAC,eAC9C,kBAAC,IAAD,KACE,kBAAC,IAAD,iBADF,IACsB,kBAAC,IAAD,oBADtB,OACmD,KAEnD,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,cADF,IACoB,KAAK,kBAAC,IAAD,aADzB,KAC0C,kBAAC,IAAD,aAAgB,KAD1D,MACkE,kBAAC,IAAD,gBADlE,MAGA,kBAAC,IAAD,CAAMA,OAAQ,GACZ,kBAAC,IAAD,KAAK,kBAAC,IAAD,KAAO,eAEd,kBAAC,IAAD,KACG,Q,iCCjBT,2CAiCec,UA7BK,WAClB,OACE,kBAAC,IAAD,CAAarE,MAAOtC,mBAAS,iBAAkB,CAAC,gBAC9C,kBAAC,IAAD,KACE,kBAAC,IAAD,iBADF,IACsB,kBAAC,IAAD,oBADtB,IACgD,KAEhD,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,gBADF,KACsB,kBAAC,IAAD,gBADtB,KAGA,kBAAC,IAAD,CAAMA,OAAQ,GACZ,kBAAC,IAAD,kBADF,KACyB,KAAK,kBAAC,IAAD,aAD9B,KAC+C,kBAAC,IAAD,aAAgB,MAE/D,kBAAC,IAAD,KACG,QAEH,kBAAC,IAAD,CAAMA,OAAQ,GACZ,kBAAC,IAAD,KAAK,kBAAC,IAAD,KAAO,eAEd,kBAAC,IAAD,KACG,KAEH,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,uBADF,IAC4B,kBAAC,IAAD,iBAD5B,IACkD,kBAAC,IAAD,oBADlD,Q,iCC1BN,2CA4Cee,UAxCC,WACd,IAAIsC,EAAQlJ,mBAAS,0BACrB,OACE,kBAAC,IAAD,CAAasC,MAAOtC,mBAAS,qCAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,+BACsBA,mBAAS,kCAD/B,QAIF,kBAAC,IAAD,KACE,kBAAC,IAAD,gCACuBA,mBAAS,qCADhC,OAIF,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,YADF,IACiB,kBAAC,IAAD,WADjB,MACiC,kBAAC,IAAD,iBADjC,IACuD,kBAAC,IAAD,qBADvD,MACiF,kBAAC,IAAD,SAAOkJ,EAAP,KADjF,MACwG,kBAAC,IAAD,oBADxG,KAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,OAC2C,kBAAC,IAAD,WAD3C,IAEE,kBAAC,IAAD,mBAAalJ,mBAAS,mCAAoC,CAACkJ,GAAQ,gBAErE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAM,MAAQlJ,mBAAS,wCAEzB,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAM,MAAQA,mBAAS,wCAEzB,kBAAC,IAAD,KACE,kBAAC,IAAD,YADF,IACiB,kBAAC,IAAD,WADjB,MACiC,kBAAC,IAAD,iBADjC,IACwD,KAAK,kBAAC,IAAD,gBAD7D,KACiF,kBAAC,IAAD,sBADjF,KAC2G,kBAAC,IAAD,eAD3G,KAC8H,kBAAC,IAAD,oBAAuB,KADrJ,KAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,OAC2C,kBAAC,IAAD,WAD3C,IAEE,kBAAC,IAAD,mBAAaA,mBAAS,CAAEC,QAAS,oCAAqCC,OAAQ,oB,iCCtCtF,2CAce2G,UAVkB,kBAC/B,kBAAC,IAAD,CAAavE,MAAK,4BAAuBtC,mBAAS,qBAAhC,QAChB,kBAAC,IAAD,KAAM,kBAAC,IAAD,eAAN,IAA0B,kBAAC,IAAD,gBAA1B,MAAkD,KAClD,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,oBADF,KAC0B,kBAAC,IAAD,SAAO7F,mBAAS,kCAAhB,MAE1B,kBAAC,IAAD,KAAO,Q,iCCVX,2CAce8G,UAVoB,kBACjC,kBAAC,IAAD,CAAaxE,MAAK,4BAAuBtC,mBAAS,uBAAhC,QAChB,kBAAC,IAAD,KAAM,kBAAC,IAAD,eAAN,IAA0B,kBAAC,IAAD,gBAA1B,MAAkD,KAClD,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,oBADF,KAC0B,kBAAC,IAAD,SAAO7F,mBAAS,oCAAhB,MAE1B,kBAAC,IAAD,KAAO,Q,iCCVX,2CAuBA,SAASmJ,EAAT,GAA4B,IAATC,EAAQ,EAARA,KACjB,OAAIA,EAAKC,MAAM,KACN,kBAAC,IAAD,SAAOD,EAAP,KAEA,kBAAC,IAAD,KAAMA,GANFrC,UAjBgB,WAC7B,IAAMuC,EAActJ,mBAAS,qBACvBuJ,EAAgBvJ,mBAAS,uBAC/B,OACE,kBAAC,IAAD,CAAasC,MAAM,8BACjB,kBAAC,IAAD,KAAM,kBAAC,IAAD,eAAN,IAA0B,kBAAC,IAAD,gBAA1B,MAAkD,KAClD,kBAAC,IAAD,CAAMuD,OAAQ,GACZ,kBAACsD,EAAD,CAASC,KAAME,IADjB,KACkC,kBAAC,IAAD,gBADlC,IACuD,kBAAC,IAAD,WAASA,EAAT,KADvD,MAGA,kBAAC,IAAD,CAAMzD,OAAQ,GACZ,kBAACsD,EAAD,CAASC,KAAMG,IADjB,KACoC,kBAAC,IAAD,gBADpC,IACyD,kBAAC,IAAD,WAASA,EAAT,KADzD,KAGA,kBAAC,IAAD,KAAO,Q,iCChBb,2CAeevC,UAXS,kBACtB,kBAAC,IAAD,CAAa1E,MAAOtC,mBAAS,oBAAqBwC,KAAK,QACrD,kBAAC,IAAD,+BACA,kBAAC,IAAD,2CACA,kBAAC,IAAD,CAAMqD,OAAQ,GAAd,+BACA,kBAAC,IAAD,CAAMA,OAAQ,GAAd,sBAAsB7F,mBAAS,qBAA/B,OACA,kBAAC,IAAD,CAAM6F,OAAQ,GAAd,sBAAsB7F,mBAAS,uBAA/B,OACA,kBAAC,IAAD,CAAM6F,OAAQ,GAAd,0BAAyB,kBAAC,IAAD,UAAQ7F,mBAAS,wC,iCCX9C,2CAsBeiH,UAlBE,kBACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACqB,IADrB,IAC0B,kBAAC,IAAD,iBAD1B,IAC+C,IAD/C,IACoD,kBAAC,IAAD,aADpD,IACoE,kBAAC,IAAD,oBAEpE,kBAAC,IAAD,KACE,kBAAC,IAAD,YADF,IACiB,kBAAC,IAAD,cADjB,MACoC,kBAAC,IAAD,iBADpC,IAC0D,kBAAC,IAAD,sBAD1D,KAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,IACwC,kBAAC,IAAD,cADxC,IAEE,kBAAC,IAAD,mBAAajH,mBAAS,qCAExB,kBAAC,IAAD,KACE,kBAAC,IAAD,kBAAYA,mBAAS,yB,iCCjB3B,2CAUekH,UANS,kBACtB,kBAAC,IAAD,CAAa5E,MAAOtC,mBAAS,aAAcwC,KAAK,QAC9C,kBAAC,IAAD,gC,iCCNJ,2CAUe2E,UANU,kBACvB,kBAAC,IAAD,CAAa7E,MAAOtC,mBAAS,cAAewC,KAAK,QAC/C,kBAAC,IAAD,6B,iCCNJ,2CA+Be4E,UA3BI,WACjB,IAAM8B,EAAQlJ,mBAAS,eACjBwJ,EAAQxJ,mBAAS,eACvB,OACE,kBAAC,IAAD,CAAasC,MAAK,UAAKtC,mBAAS,4BAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,YADF,IACiB,kBAAC,IAAD,UADjB,MACgC,kBAAC,IAAD,iBADhC,IACsD,kBAAC,IAAD,qBADtD,MACgF,kBAAC,IAAD,SAAOkJ,EAAP,KADhF,MAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,IACwC,kBAAC,IAAD,UADxC,IAEE,kBAAC,IAAD,mBACUlJ,mBAAS,kCAAmC,CAACkJ,OAGzD,kBAAC,IAAD,KACE,kBAAC,IAAD,YADF,IACiB,kBAAC,IAAD,UADjB,MACgC,kBAAC,IAAD,iBADhC,IACsD,kBAAC,IAAD,uBADtD,MACkF,kBAAC,IAAD,SAAOA,EAAP,KADlF,KACwG,kBAAC,IAAD,SAAOM,EAAP,KADxG,MAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,IACwC,kBAAC,IAAD,UADxC,IAEE,kBAAC,IAAD,mBACUxJ,mBAAS,oCAAqC,CAACkJ,EAAOM,U,iCCxBxE,2CAmBenC,UAfc,kBAC3B,kBAAC,IAAD,CAAa/E,MAAK,wBAAmBtC,mBAAS,qBAA5B,QAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACsB,kBAAC,IAAD,gBADtB,MAC8C,KAE9C,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,mBADF,KACyB,kBAAC,IAAD,SAAO7F,mBAAS,iCAAhB,KADzB,KAGA,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,qBADF,KAC2B,kBAAC,IAAD,SAAO7F,mBAAS,mCAAhB,MAE3B,kBAAC,IAAD,KAAO,Q,iCCfX,2CA+BesH,UA3BK,WAClB,IAAM4B,EAAQlJ,mBAAS,eACjBwJ,EAAQxJ,mBAAS,eACvB,OACE,kBAAC,IAAD,CAAasC,MAAK,UAAKtC,mBAAS,4BAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,YADF,IACiB,kBAAC,IAAD,UADjB,MACgC,kBAAC,IAAD,iBADhC,IACsD,kBAAC,IAAD,qBADtD,KACgF,KAAK,kBAAC,IAAD,cADrF,KACuG,kBAAC,IAAD,SAAOkJ,EAAP,KAAqB,KAD5H,KAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,IACwC,kBAAC,IAAD,UADxC,IAEE,kBAAC,IAAD,mBACUlJ,mBAAS,kCAAmC,CAAEkJ,aAG1D,kBAAC,IAAD,KACE,kBAAC,IAAD,YADF,IACiB,kBAAC,IAAD,UADjB,MACgC,kBAAC,IAAD,iBADhC,IACsD,kBAAC,IAAD,uBADtD,KACkF,KAAK,kBAAC,IAAD,cADvF,KACyG,kBAAC,IAAD,SAAOA,EAAP,KADzG,KAC+H,kBAAC,IAAD,cAD/H,KACiJ,kBAAC,IAAD,SAAOM,EAAP,KAAqB,KADtK,KAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,IACwC,kBAAC,IAAD,UADxC,IAEE,kBAAC,IAAD,mBACUxJ,mBAAS,oCAAqC,CAAEkJ,QAAOM,gB,iCCxBzE,2CAmBejC,UAfe,kBAC5B,kBAAC,IAAD,CAAajF,MAAK,wBAAmBtC,mBAAS,qBAA5B,QAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACsB,kBAAC,IAAD,gBADtB,MAC8C,KAE9C,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,mBADF,KACyB,kBAAC,IAAD,SAAO7F,mBAAS,iCAAhB,KADzB,KAGA,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,qBADF,KAC2B,kBAAC,IAAD,SAAO7F,mBAAS,mCAAhB,MAE3B,kBAAC,IAAD,KAAO,Q,iCCfX,2CAwBewH,UApBY,kBACzB,kBAAC,IAAD,CAAalF,MAAOtC,mBAAS,gCAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,eADF,IACqB,IADrB,IAC0B,kBAAC,IAAD,oBAD1B,IACkD,IADlD,IACuD,kBAAC,IAAD,aADvD,IACuE,kBAAC,IAAD,oBAEvE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,IACwC,kBAAC,IAAD,iBADxC,IAC8D,kBAAC,IAAD,sBAD9D,KAEE,kBAAC,IAAD,mBAAaA,mBAAS,qCAExB,kBAAC,IAAD,KACE,kBAAC,IAAD,oBADF,IAC2B,kBAAC,IAAD,SAAOA,mBAAS,uBAAhB,KAD3B,KAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,IACwC,kBAAC,IAAD,iBADxC,IAC8D,kBAAC,IAAD,sBAD9D,KAEE,kBAAC,IAAD,mBAAaA,mBAAS,0C,iCCnB5B,2CAkCeyH,UA9BS,WACtB,OACE,kBAAC,IAAD,CAAanF,MAAOtC,mBAAS,4CAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,YADF,IACiB,kBAAC,IAAD,oBADjB,MAC0C,kBAAC,IAAD,iBAD1C,IACiE,KAEjE,kBAAC,IAAD,CAAM6F,OAAQ,GACZ,kBAAC,IAAD,gBADF,KACsB,kBAAC,IAAD,sBADtB,KAGA,kBAAC,IAAD,CAAMA,OAAQ,GACZ,kBAAC,IAAD,kBADF,MACyB,kBAAC,IAAD,cADzB,KAC2C,kBAAC,IAAD,WAD3C,IAC0D,KAE1D,kBAAC,IAAD,CAAMA,OAAQ,GACZ,kBAAC,IAAD,eADF,IACoB,kBAAC,IAAD,cADpB,IACqC,kBAAC,IAAD,gBADrC,IAC0D,kBAAC,IAAD,SAAM,kBAAC,IAAD,UAAN,QAAyB,kBAAC,IAAD,UAAzB,KAA8C,kBAAC,IAAD,WADxG,KACuH,kBAAC,IAAD,YADvH,KAGA,kBAAC,IAAD,CAAMA,OAAQ,GACX,KAEH,kBAAC,IAAD,KACG,IADH,KAGA,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,IACwC,kBAAC,IAAD,oBADxC,IAEE,kBAAC,IAAD,mBAAa7F,mBAAS,CAAEC,QAAS,iCAAkC0I,UAAW,SAAAc,GAAG,OAAIA,EAAIC,QAAQ,YAAa,c,iCC5BtH,2CAgBehC,UAZD,kBACZ,kBAAC,IAAD,CAAapF,MAAOtC,mBAAS,gBAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,YADF,IACiB,kBAAC,IAAD,cADjB,MACoC,kBAAC,IAAD,iBADpC,IAC0D,kBAAC,IAAD,sBAD1D,KAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,gBADF,IACuB,kBAAC,IAAD,YADvB,IACwC,kBAAC,IAAD,cADxC,IAEE,kBAAC,IAAD,mBAAaA,mBAAS","file":"static/js/0.03698a84.chunk.js","sourcesContent":["import { getRandomString } from '~modules'\nimport { STRINGS } from '~constants'\n\nclass HashMaker {\n\n  constructor(blacklist = []) {\n    this.used = blacklist\n    this.charset = STRINGS.defaultHashCharset\n  }\n\n  createHash(length, charset) {\n    const charsetToUse = typeof charset === 'string' ? getSanitizedCharset(charset) : this.charset\n    const LOOP_LIMIT = 10 // Temporary, need to find out maximum combination count\n    let newHash, count = 0\n    do {\n      newHash = getRandomString(length, charsetToUse)\n    } while (this.used.includes(newHash) && count++ < LOOP_LIMIT)\n    if (this.used.includes(newHash)) {\n      throw Error('Too many ID clashes while attempting to create a unique hash')\n      // throw Error(`All possible hashes of length ${length} has been used up!`)\n    }\n    this.used.push(newHash)\n    return newHash\n  }\n\n  unregisterHash(hash) {\n    const indexOfHashInUsed = this.used.indexOf(hash)\n    if (indexOfHashInUsed > -1) {\n      this.used.splice(indexOfHashInUsed, 1)\n    }\n  }\n\n}\n\nexport default HashMaker\n\nfunction getSanitizedCharset(charset) {\n  return [...new Set(charset.split(''))].join('')\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useMediaQuery } from '@material-ui/core'\nimport { localize } from 'langutil'\nimport useTheme from '~hooks/useTheme'\n\nfunction CopyButton({ onClick, copied }) {\n  const { palette: { misc: { code } }, type } = useTheme()\n  const isCompactWidth = useMediaQuery('(max-width: 800px)')\n  return (\n    <button\n      className='code-disp-toolbar-button'\n      onClick={onClick}\n      style={{\n        backgroundColor: copied ? 'transparent' : code.copyButtonBg,\n        border: copied ? `solid 1px ${type === 'dark' ? '#00AA00' : '#008800'}` : '',\n        color: code.copyButtonFg,\n        height: isCompactWidth ? 32 : 'auto',\n        paddingLeft: isCompactWidth ? '1em' : 0,\n        paddingRight: isCompactWidth ? '1em' : 0,\n      }}\n    >\n      <div\n        className='code-disp-toolbar-button-div'\n        style={{\n          color: copied ? (type === 'dark' ? '#00CC00' : '#006600') : '',\n        }}\n      >\n        <i\n          className='material-icons code-disp-toolbar-button-icon'\n          children={copied ? 'done' : 'file_copy'}\n        />\n        {localize({ keyword: copied ? 'COPIED' : 'COPY', casing: 'upperCase' })}\n      </div>\n    </button>\n  )\n}\n\nCopyButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  copied: PropTypes.bool,\n}\n\nexport default CopyButton\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { localize } from 'langutil'\nimport copy from 'copy-to-clipboard'\nimport { HashFactory } from '~classes'\nimport withTheme from '~hocs/withTheme'\nimport useTheme from '~hooks/useTheme'\nimport CopyButton from './copy-button'\n\nlet idTracker = new HashFactory()\n\nclass CodeDisplayBase extends React.Component {\n\n  constructor() {\n    super()\n    this.componentId = idTracker.createHash(6)\n    this.state = {\n      copied: false\n    }\n  }\n\n  modStyles = {\n    light: {\n      '+': { backgroundColor: '#a1cc7766', color: '#338800' },\n      '-': { backgroundColor: '#44000066', color: '#FFAAAA' },\n      '*': { backgroundColor: '#FFFFFF0F', color: '#00000000' },\n    },\n    dark: {\n      '+': { backgroundColor: '#44553366', color: '#AAFFAA' },\n      '-': { backgroundColor: '#44000066', color: '#FFAAAA' },\n      '*': { backgroundColor: '#FFFFFF0F', color: '#00000000' },\n    },\n  }\n\n  componentWillUnmount() {\n    idTracker.unregisterHash(this.componentId)\n    clearTimeout(this.timeoutRef)\n  }\n\n  extractCode = () => {\n    try {\n      const { children } = this.props\n      let childrenToUse = Array.isArray(children) ? children : [children]\n      let output = ''\n      for (let i = 0; i < childrenToUse.length; i++) {\n        const id = `code-content-${this.componentId}-${i}`\n        const extracted = document.getElementById(id).innerText\n        output += extracted === ' ' ? '' : extracted\n        if (extracted !== '\\n') { output += '\\n' }\n      }\n      return output\n    } catch (e) {\n      console.error(e)\n      return ''\n    }\n  }\n\n  handleCopy = () => {\n    const codeToCopy = this.extractCode()\n    // console.log('codeToCopy:'); console.log(codeToCopy)\n    try {\n      copy(codeToCopy)\n      this.showCopied()\n    } catch (e) {\n      window.alert(localize('FAIL_COPY_DESC'))\n    }\n  }\n\n  showCopied = () => {\n    this.setState({ copied: true })\n    this.timeoutRef = setTimeout(() => {\n      this.setState({ copied: false })\n    }, 1500)\n  }\n\n  render() {\n    const { title, children = [], startLineFrom = 1, mode = 'all', theme } = this.props\n    let modArray = [], lineArray = [], codeArray = [], padArray = []\n\n    // Ensure children is always array\n    const _children = Array.isArray(children) ? children : [children]\n\n    for (let i = 0; i < _children.length; i++) {\n\n      // conditional checking for line skipping\n      const modType = _children[i].type.mod\n      const { backgroundColor, color } = this.modStyles[theme.type][modType] || {}\n\n      if (mode === 'all') {\n        modArray.push(\n          <div key={`mod${i}`}\n            className='code-disp-content-each-line'\n            style={{\n              color: ['+', '-'].includes(modType) ? color : 'transparent',\n              backgroundColor,\n              paddingInlineStart: 20,\n            }}\n            children={modType || '•'}\n          />\n        )\n      }\n\n      if (['all', 'line'].includes(mode)) {\n        lineArray.push(\n          <div\n            key={`line${i}`}\n            className='code-disp-content-each-line'\n            style={{\n              backgroundColor,\n              paddingInlineStart: 20,\n              paddingInlineEnd: 20,\n            }}\n          >\n            {i + startLineFrom}\n          </div>\n        )\n      }\n\n      codeArray.push(\n        <div\n          key={`code${i}`}\n          id={`code-content-${this.componentId}-${i}`}\n          className='code-disp-content-each-line code-disp-content-code-actual'\n          style={{ backgroundColor }}\n        >\n          {_children[i]}\n        </div>\n      )\n\n      padArray.push(\n        <div\n          key={`pad${i}`}\n          style={{ color: 'transparent', backgroundColor }}\n          className='code-disp-content-each-line'\n          children={' '}\n        />\n      )\n\n    }\n\n    const { copied } = this.state\n\n    return (\n      <CodeDisplayContainer>\n        <CodeDisplayToolbarContainer>\n          <p className='code-disp-title' children={title} />\n          <CopyButton onClick={this.handleCopy} copied={copied} />\n        </CodeDisplayToolbarContainer>\n        <CodeDisplayContentContainer>\n\n          {/* Modified indicator */}\n          <div className='code-disp-content-mod-container'>\n            <pre className='code-disp-pre' children={modArray} />\n          </div>\n\n          {/* Line number */}\n          <div\n            className='code-disp-content-line-container'\n            style={{\n              color: theme.type === 'dark' ? '#ddeeff88' : '#11223388',\n            }}\n          >\n            <pre className='code-disp-pre' children={lineArray} />\n          </div>\n\n          {/* Actual code */}\n          <div className='code-disp-content-code-container'>\n            <pre className='code-disp-pre code'>\n              {codeArray}\n            </pre>\n          </div>\n\n          {/* Ending padding */}\n          <div>\n            <pre className='code-disp-pre' children={padArray} />\n          </div>\n\n        </CodeDisplayContentContainer>\n      </CodeDisplayContainer>\n    )\n  }\n\n}\n\n/**\n * @augments{React.Component<{}>}\n */\nconst CodeDisplay = withTheme(CodeDisplayBase)\n\nCodeDisplay.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n  startLineFrom: PropTypes.number,\n  mode: PropTypes.oneOf(['none', 'line', 'all'])\n}\n\nexport default CodeDisplay\n\nfunction CodeDisplayContainer({ children }) {\n  const { palette: { misc: { code } } } = useTheme()\n  return (\n    <div\n      className='code-disp-container'\n      children={children}\n      style={{\n        backgroundColor: code.editorBg,\n      }}\n    />\n  )\n}\n\nfunction CodeDisplayContentContainer({ children }) {\n  const { palette: { misc: { code } } } = useTheme()\n  return (\n    <div\n      className='code-disp-content-container'\n      children={children}\n      style={{\n        color: code.editorFg,\n      }}\n    />\n  )\n}\n\nfunction CodeDisplayToolbarContainer({ children }) {\n  const { palette: { misc: { code } } } = useTheme()\n  return (\n    <div\n      className='code-disp-toolbar-container'\n      children={children}\n      style={{\n        backgroundColor: code.titleBarBg,\n        color: code.titleBarFg,\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport CodeDisplay from './code-display'\nimport './index.css'\nimport useTheme from '~hooks/useTheme'\n\nconst INDENT_WIDTH = 4\nfunction useCodeTheme() { return useTheme().palette.misc.code }\n\nexport const Com = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().comment }} />\n)\n\nexport const Key = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().keyword }} />\n)\n\nexport const Var = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().variable }} />\n)\n\nexport const Def = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().definition }} />\n)\n\nexport const Html = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().html }} />\n)\n\nexport const Prop = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().propPass }} />\n)\n\nexport const Str = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().string }} />\n)\n\nexport const Num = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().number }} />\n)\n\nexport const Rgx = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().regex }} />\n)\n\nexport const Rgxe = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().regexEsc }} />\n)\n\nexport const Bool = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().boolean }} />\n)\n\nexport const Type = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().type }} />\n)\n\nexport const Func = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().function }} />\n)\n\nexport const Ang = ({ children }) => (\n  <span children={children} style={{ color: useCodeTheme().angular }} />\n)\n\nexport const Mark = ({ children }) => (\n  <span\n    children={children}\n    style={{\n      backgroundColor: useCodeTheme().mark,\n      borderRadius: '0.35em',\n      paddingBlockStart: '0.15em',\n      paddingBlockEnd: '0.15em',\n      paddingInlineStart: '0.5em',\n      paddingInlineEnd: '0.5em',\n    }}\n  />\n)\n\nexport const Line = ({ children = <br />, indent = 0 }) => (\n  <>{' '.repeat(4 * indent)}{children ? children : ' '}</>\n)\n\nexport const LineEmp = ({ children, indent = 0 }) => (\n  <>{' '.repeat(INDENT_WIDTH * indent)}{children ? children : ' '}</>\n)\nLineEmp.mod = '*'\n\nexport const LineAdd = ({ children, indent = 0 }) => (\n  <>{' '.repeat(INDENT_WIDTH * indent)}{children ? children : ' '}</>\n)\nLineAdd.mod = '+'\n\nexport const LineRem = ({ children, indent = 0 }) => (\n  <>{' '.repeat(INDENT_WIDTH * indent)}{children ? children : ' '}</>\n)\nLineRem.mod = '-'\n\nexport const Err = ({ children }) => (\n  <span children={children} style={{\n    textDecorationColor: '#F48771',\n    textDecorationLine: 'underline',\n    textDecorationStyle: 'dashed'\n  }} />\n)\n\nexport default CodeDisplay\n","let defaultExtracted = false\nlet CodeSamples = {\n  // Demo: require('./demo'),\n  ApiAutoDetect: require('./api-auto-detect'),\n  ApiInit: require('./api-init'),\n  ApiInitReact: require('./api-init-react'),\n  ApiLangmap: require('./api-langmap'),\n  ApiLocalize: require('./api-localize'),\n  ApiLogsFocus: require('./api-logs-focus'),\n  ApiSetLanguage: require('./api-set-language'),\n  ApiSetDictionary: require('./api-set-dictionary'),\n  ApiUseLang: require('./api-use-lang'),\n  ApiWithLang: require('./api-with-lang'),\n  Casings: require('./casings'),\n  DictionaryPrimaryExample: require('./dictionary-primary-example'),\n  DictionarySecondaryExample: require('./dictionary-secondary-example'),\n  DictionaryIndexExample: require('./dictionary-index-example'),\n  FolderStructure: require('./folder-structure'),\n  HomeDemo: require('./home-demo'),\n  InstallUsingNpm: require('./install-using-npm'),\n  InstallUsingYarn: require('./install-using-yarn'),\n  ParamArray: require('./paramarray'),\n  ParamArrayDictionary: require('./paramarray-dictionary'),\n  ParamObject: require('./paramobject'),\n  ParamObjectDictionary: require('./paramobject-dictionary'),\n  SwitchingLanguages: require('./switching-languages'),\n  Transformations: require('./transformations'),\n  Usage: require('./usage'),\n}\n\nif (!defaultExtracted) {\n  const index = Object.keys(CodeSamples)\n  for (let i = 0; i < index.length; i++) {\n    CodeSamples[index[i]] = CodeSamples[index[i]].default\n  }\n}\n\nmodule.exports = CodeSamples\n","import { useLayoutEffect } from 'react'\n\nconst DEFAULT_TITLE = 'langutil'\nconst DEFAULT_DESC = 'Localization for JavaScript made simple'\n\nfunction AppendMeta({ title, desc }) {\n  useEffectTitle(title)\n  useEffectDesc(desc)\n  return null\n}\n\nexport default AppendMeta\n\nfunction useEffectTitle(title) {\n  useLayoutEffect(() => {\n    const _title = DEFAULT_TITLE + (typeof title === 'string' ? ` | ${title}` : '')\n    try {\n      document.title = _title\n      document.getElementsByTagName('meta')['og:title'].content = _title\n    } catch (e) { }\n  }, [title])\n}\n\nfunction useEffectDesc(desc = DEFAULT_DESC) {\n  useLayoutEffect(() => {\n    try {\n      document.getElementsByTagName('meta')['description'].content = desc\n      document.getElementsByTagName('meta')['og:description'].content = desc\n    } catch (e) { }\n  }, [desc])\n}\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Key, Var, Str, Func, Com } from '~components/code-display'\nimport { withProps } from '~modules'\n\nconst ApiAutoDetect = () => (\n  <CodeDisplay title={localize('HOW_TO_USE_API', ['AUTO_DETECT'])}>\n    <Line>\n      <Com>{`// ${localize('WEB')}`}</Com>\n    </Line>\n    <Line>\n      <Key>import</Key> {'{ '}<Var>init</Var>, <Var>setLanguage</Var>, <Var>AUTO_DETECT</Var>{' }'} <Key>from</Key> <Str>'langutil'</Str>\n    </Line>\n    <Line />\n    <Line>\n      <Com>{'// '}{localize({\n        keyword: 'YOU_NEED_IMPORT_AD_IF_USING_RN',\n        transform: withProps({ dect: 'AUTO_DETECT', add: '\\'native-additions\\'', rn: 'React Native' })\n      })}</Com>\n    </Line>\n    <Line>\n      <Key>import</Key> {'{ '}<Var>AUTO_DETECT</Var>{' }'} <Key>from</Key> <Str>'langutil/native-additions'</Str>\n    </Line>\n    <Line />\n    <Line>\n      <Com>{`// ${localize('USAGE_OF_OTHER_API_UNCHANGED')}`}</Com>\n    </Line>\n    <Line>\n      <Func>init</Func>(<Var>dictionary</Var>, <Str>'{localize('DOCX_PRIMARY_LANG')}'</Str>, <Var>AUTO_DETECT</Var>)\n    </Line>\n    <Line>\n      <Func>setLanguage</Func>(<Str>'{localize('DOCX_PRIMARY_LANG')}'</Str>, <Var>AUTO_DETECT</Var>)\n    </Line>\n  </CodeDisplay>\n)\n\nexport default ApiAutoDetect\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Key, Var, Str, Func, Mark } from '~components/code-display'\n\nconst ApiInit = () => (\n  <CodeDisplay\n    title={localize('HOW_TO_USE_API', ['init()'])}\n  >\n    <Line>\n      <Key>import</Key> <Var>langutil</Var>, {'{'} <Var>localize</Var>, <Mark><Var>AUTO_DETECT</Var></Mark> {'}'} <Key>from</Key> <Str>'langutil'</Str>\n    </Line>\n    <Line>\n      <Key>import</Key> <Var>dictionary</Var> <Key>from</Key> <Str>'./localizations'</Str>\n    </Line>\n    <Line />\n    <Line>\n      <Var>langutil</Var>.<Func>init</Func>(<Var>dictionary</Var>, <Str>'{localize('DOCX_PRIMARY_LANG')}'</Str>, <Mark><Var>AUTO_DETECT</Var></Mark>)\n    </Line>\n  </CodeDisplay>\n)\n\nexport default ApiInit\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, {\n  Com, Def, Func, Line, LineAdd, Key, Str, Type, Var\n} from '~components/code-display'\n\nconst ApiInit = () => (\n  <CodeDisplay title={localize('HOW_TO_USE_API_REACT', ['init()'])}>\n    <Line>\n      <Key>import</Key> <Var>React</Var> <Key>from</Key> <Str>'React'</Str>\n    </Line>\n    <LineAdd>\n      <Key>import</Key> <Var>langutil</Var>, {'{'} <Var>localize</Var>, <Var>AUTO_DETECT</Var> {'}'} <Key>from</Key> <Str>'langutil'</Str>\n    </LineAdd>\n    <LineAdd>\n      <Key>import</Key> <Var>dictionary</Var> <Key>from</Key> <Str>'./localizations'</Str>\n    </LineAdd>\n    <Line>\n      <Key>import</Key> <Var>logo</Var> <Key>from</Key> <Str>'./logo.svg'</Str>\n    </Line>\n    <Line>\n      <Key>import</Key> <Str>'./index.css'</Str>\n    </Line>\n    <LineAdd />\n    <LineAdd>\n      <Var>langutil</Var>.<Func>init</Func>(<Var>dictionary</Var>, <Str>'{localize('DOCX_PRIMARY_LANG')}'</Str>, <Var>AUTO_DETECT</Var>)\n    </LineAdd>\n    <Line />\n    <Line>\n      <Def>function</Def> <Type>App</Type> () {'{'}\n    </Line>\n    <Line indent={1}>\n      <Com>{'// ...'}</Com>\n    </Line>\n  </CodeDisplay>\n)\n\nexport default ApiInit\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Com, Func, Line, Str, Var } from '~components/code-display'\n\nconst ApiLangmap = () => {\n  const lang2 = localize('DOCX_SECONDARY_LANG')\n  const keyword = 'HELLO'\n  const value2 = localize('DOCX_HELLO_VALUE_SECONDARY')\n  return (\n    <CodeDisplay title={localize('HOW_TO_USE_API', ['langmap()'])}>\n      <Line>\n        <Func>setLanguage</Func>(<Str>'{localize('DOCX_PRIMARY_LANG')}'</Str>)\n      </Line>\n      <Line>\n        <Func>localize</Func>(<Str>'{keyword}'</Str>)\n        <Com>{' // '}{localize('DOCX_HELLO_VALUE_PRIMARY')}</Com>\n      </Line>\n      <Line>\n        <Func>langmap</Func>(<Str>'{lang2}'</Str>, <Str>'{keyword}'</Str>)\n        <Com>{` // ${value2}`}</Com>\n      </Line>\n      <Line>\n        <Func>langmap</Func>({'{'}\n      </Line>\n      <Line indent={1}>\n        <Var>lang</Var>: <Str>'{lang2}'</Str>,\n      </Line>\n      <Line indent={1}>\n        <Var>keyword</Var>: <Str>'{keyword}'</Str>\n      </Line>\n      <Line>\n        }) <Com>{`// ${value2}`}</Com>\n      </Line>\n    </CodeDisplay>\n  )\n}\n\nexport default ApiLangmap\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Com, Def, Func, Line, Rgx, Rgxe, Str, Var } from '~components/code-display'\n\nconst ApiSetLanguage = () => {\n  return (\n    <CodeDisplay title={localize('HOW_TO_USE_API', ['localize()'])}>\n      <Line>\n        <Com>{`// ${localize('NORMAL_SYNTAX')}`}</Com>\n      </Line>\n      <Line>\n        <Func>localize</Func>(<Str>'KEYWORD'</Str>, [<Str>'{localize('SOME_PARAMETER')}'</Str>], <Str>'upperCase'</Str>, (<Var>str</Var>) <Def>=></Def> <Var>str</Var>.<Func>replace</Func>(<Rgx>/<Rgxe>[</Rgxe>aeiou<Rgxe>]</Rgxe>/</Rgx><Def>gi</Def>, <Str>'*'</Str>)\n      </Line>\n      <Line>\n        <Func>localize</Func>(<Str>'KEYWORD'</Str>, {'{ '}<Var>key</Var>: <Str>'{localize('SOME_PARAMETER')}'</Str>{' }'}, <Str>'upperCase'</Str>, (<Var>str</Var>) <Def>=></Def> <Var>str</Var>.<Func>replace</Func>(<Rgx>/<Rgxe>[</Rgxe>aeiou<Rgxe>]</Rgxe>/</Rgx><Def>gi</Def>, <Str>'*'</Str>)\n      </Line>\n      <Line />\n      <Line>\n        <Com>{`// ${localize('ALTERNATIVE_SYNTAX')}`}</Com>\n      </Line>\n      <Line>\n        <Func>localize</Func>({'{'}\n      </Line>\n      <Line indent={1}>\n        <Var>keyword</Var>: <Str>'KEYWORD'</Str>\n      </Line>\n      <Line indent={1}>\n        <Var>param</Var>: [<Str>'{localize('SOME_PARAMETER')}'</Str>]\n      </Line>\n      <Line indent={1}>\n        <Com>{`// ${localize('OR', null, 'lowerCase')}`}</Com>\n      </Line>\n      <Line indent={1}>\n        <Var>param</Var>: {'{ '}<Var>key</Var>: <Str>'{localize('SOME_PARAMETER')}'</Str>{' }'}\n      </Line>\n      <Line indent={1}>\n        <Var>casing</Var>: <Str>'upperCase'</Str>\n      </Line>\n      <Line indent={1}>\n        <Var>transform</Var>: (<Var>str</Var>) <Def>=></Def> <Var>str</Var>.<Func>replace</Func>(<Rgx>/<Rgxe>[</Rgxe>aeiou<Rgxe>]</Rgxe>/</Rgx><Def>gi</Def>, <Str>'*'</Str>)\n      </Line>\n      <Line>\n        {'})'}\n      </Line>\n    </CodeDisplay>\n  )\n}\n\nexport default ApiSetLanguage\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Com, Def, Func, Line, Key, Str, Var } from '~components/code-display'\n\nconst ApiLogsFocus = () => (\n  <CodeDisplay title={localize('HOW_TO_USE_API', ['logs.focus()'])}>\n    <Line>\n      <Key>import</Key> {'{ '}<Var>logs</Var>{' }'} <Key>from</Key> <Str>'langutil'</Str>\n    </Line>\n    <Line />\n    <Line>\n      <Def>let</Def> <Var>loggedCodeIsSuccessful</Var> = <Var>logs</Var>.<Func>focus</Func>(() <Def>=></Def> {'{'}\n    </Line>\n    <Line indent={1}>\n      <Com>{`// ${localize('YOUR_CODE_HERE')}`}</Com>\n    </Line>\n    <Line>\n      {'})'}\n    </Line>\n    <Line />\n    <Line>\n      <Key>if</Key> (!<Var>loggedCodeIsSuccessful</Var>) {'{'}\n    </Line>\n    <Line indent={1}>\n      <Func>doFallbackAction</Func>()\n    </Line>\n    <Line>\n      {'}'}\n    </Line>\n  </CodeDisplay>\n)\n\nexport default ApiLogsFocus\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Func, Line, Str, Def, Var, Ang } from '~components/code-display'\n\nconst ApiSetLanguage = () => {\n  return (\n    <CodeDisplay title={localize('HOW_TO_USE_API', ['setLanguage()'])}>\n      <Line>\n        <Ang>{'<'}</Ang><Def>select</Def><Ang>{'>'}</Ang>\n      </Line>\n      <Line indent={1}>\n        <Ang>{'<'}</Ang>\n        <Def>option</Def> <Var>onClick</Var>={'{() '}<Def>=></Def>{' { '}\n        <Func>setLanguage</Func>\n        (<Str>'{localize('DOCX_PRIMARY_LANG')}'</Str>)\n        {' }}'}<Ang>{'>'}</Ang>\n      </Line>\n      <Line indent={2}>{localize('DOCX_PRIMARY_LANG_NAME')}</Line>\n      <Line indent={1}>\n        <Ang>{'</'}</Ang><Def>option</Def><Ang>{'>'}</Ang>\n      </Line>\n      <Line indent={1}>\n        <Ang>{'<'}</Ang>\n        <Def>option</Def> <Var>onClick</Var>={'{() '}<Def>=></Def>{' { '}\n        <Func>setLanguage</Func>\n        (<Str>'{localize('DOCX_SECONDARY_LANG')}'</Str>)\n        {' }}'}<Ang>{'>'}</Ang>\n      </Line>\n      <Line indent={2}>{localize('DOCX_SECONDARY_LANG_NAME')}</Line>\n      <Line indent={1}>\n        <Ang>{'</'}</Ang><Def>option</Def><Ang>{'>'}</Ang>\n      </Line>\n      <Line>\n        <Ang>{'</'}</Ang><Def>select</Def><Ang>{'>'}</Ang>\n      </Line>\n    </CodeDisplay>\n  )\n}\n\nexport default ApiSetLanguage\n\n\n/*\n\n<select>\n    <option onClick={() => { setLanguage('en')} }>\n        English\n    </option>\n    <option onClick={() => { setLanguage('zh')} }>\n        Chinese\n    </option>\n</select>\n\n*/","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Func, Key, Line, Str, Var } from '~components/code-display'\n\nconst ApiSetLanguage = () => {\n  return (\n    <CodeDisplay title={localize('HOW_TO_USE_API', ['setDictionary()'])}>\n      <Line>\n        <Key>import</Key> <Var>dictionary</Var> <Key>from</Key> <Str>'./localizations'</Str>\n      </Line>\n      <Line>\n        <Var>langutil</Var>.<Func>setDictionary</Func>(<Var>dictionary</Var>)\n      </Line>\n    </CodeDisplay>\n  )\n}\n\nexport default ApiSetLanguage\n","import React from 'react'\nimport { localize} from 'langutil'\nimport CodeDisplay, { Com, Def, Func, Line, Mark, Var } from '~components/code-display'\n\nconst ApiUseLang = () => {\n  return (\n    <CodeDisplay title={localize('HOW_TO_USE_API', ['useLang()'])}>\n      <Line>\n        <Def>function</Def> <Func>MyComponent</Func> () {'{'}\n      </Line>\n      <Line indent={1}>\n        <Def>const</Def> {'{ '}<Var>auto</Var>, <Var>lang</Var>{' }'} = <Func>useLang</Func>()\n      </Line>\n      <Line indent={1}>\n        <Com><Mark>{'/* ... */'}</Mark></Com>\n      </Line>\n      <Line>\n        {'}'}\n      </Line>\n    </CodeDisplay>\n  )\n}\n\nexport default ApiUseLang\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Com, Def, Func, Key, Line, Mark, Var } from '~components/code-display'\n\nconst ApiWithLang = () => {\n  return (\n    <CodeDisplay title={localize('HOW_TO_USE_API', ['withLang()'])}>\n      <Line>\n        <Def>function</Def> <Func>MyComponent</Func>({'{'}\n      </Line>\n      <Line indent={1}>\n        <Var>myProp1</Var>, <Var>myProp2</Var>,\n      </Line>\n      <Line indent={1}>\n        <Var>langState</Var>: {'{ '}<Var>auto</Var>, <Var>lang</Var>{' }'}\n      </Line>\n      <Line>\n        {'}) {'}\n      </Line>\n      <Line indent={1}>\n        <Com><Mark>{'/* ... */'}</Mark></Com>\n      </Line>\n      <Line>\n        {'}'}\n      </Line>\n      <Line />\n      <Line>\n        <Key>export default</Key> <Func>withLang</Func>(<Var>MyComponent</Var>)\n      </Line>\n    </CodeDisplay>\n  )\n}\n\nexport default ApiWithLang\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Com, Var, Def, Str, Func, Type } from '~components/code-display'\n\nconst Casings = () => {\n  let name1 = localize('DOCX_NAME_1_FOR_CASING')\n  return (\n    <CodeDisplay title={localize('APPLYING_CASINGS_TO_YOUR_LOC_STR')}>\n      <Line>\n        <Com>\n          {`// HELLO_NAME: '${localize('DOCX_HELLO_NAME_FOR_CASING_RAW')}',`}\n        </Com>\n      </Line>\n      <Line>\n        <Com>\n          {`// HELLO_WORLD: '${localize('DOCX_HELLO_WORLD_FOR_CASING_VALUE')}'`}\n        </Com>\n      </Line>\n      <Line />\n      <Line>\n        <Def>let</Def> <Var>c1</Var> = <Func>localize</Func>(<Str>'HELLO_NAME'</Str>, [<Str>'{name1}'</Str>], <Str>'upperCase'</Str>)\n      </Line>\n      <Line>\n        <Type>console</Type>.<Func>log</Func> = (<Var>c1</Var>)\n        <Com>{` // ${localize('DOCX_HELLO_NAME_FOR_CASING_VALUE', [name1], 'upperCase')}`}</Com>\n      </Line>\n      <Line />\n      <Line>\n        <Com>{'// ' + localize('DOC_BODY_CASING_IF_NO_PARAM_LINE_1')}</Com>\n      </Line>\n      <Line>\n        <Com>{'// ' + localize('DOC_BODY_CASING_IF_NO_PARAM_LINE_2')}</Com>\n      </Line>\n      <Line>\n        <Def>let</Def> <Var>c2</Var> = <Func>localize</Func>({'{ '}<Var>keyword</Var>: <Str>'HELLO_WORLD'</Str>, <Var>casing</Var>: <Str>'titleCase'</Str>{' }'})\n      </Line>\n      <Line>\n        <Type>console</Type>.<Func>log</Func> = (<Var>c2</Var>)\n        <Com>{` // ${localize({ keyword: 'DOCX_HELLO_WORLD_FOR_CASING_VALUE', casing: 'titleCase' })}`}</Com>\n      </Line>\n    </CodeDisplay>\n  )\n}\n\nexport default Casings\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Str, Type, Var } from '~components/code-display'\n\nconst DictionaryPrimaryExample = () => (\n  <CodeDisplay title={`src/localizations/${localize('DOCX_PRIMARY_LANG')}.js`}>\n    <Line><Type>module</Type>.<Type>exports</Type> = {'{'}</Line>\n    <Line indent={1}>\n      <Var>HELLO_WORLD</Var>: <Str>'{localize('DOCX_HELLO_WORLD_PRIMARY_VALUE')}'</Str>\n    </Line>\n    <Line>{'}'}</Line>\n  </CodeDisplay>\n)\n\nexport default DictionaryPrimaryExample\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Str, Type, Var } from '~components/code-display'\n\nconst DictionarySecondaryExample = () => (\n  <CodeDisplay title={`src/localizations/${localize('DOCX_SECONDARY_LANG')}.js`}>\n    <Line><Type>module</Type>.<Type>exports</Type> = {'{'}</Line>\n    <Line indent={1}>\n      <Var>HELLO_WORLD</Var>: <Str>'{localize('DOCX_HELLO_WORLD_SECONDARY_VALUE')}'</Str>\n    </Line>\n    <Line>{'}'}</Line>\n  </CodeDisplay>\n)\n\nexport default DictionarySecondaryExample\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Func, Line, Str, Type, Var } from '~components/code-display'\n\nconst DictionaryIndexExample = () => {\n  const primaryLang = localize('DOCX_PRIMARY_LANG')\n  const secondaryLang = localize('DOCX_SECONDARY_LANG')\n  return (\n    <CodeDisplay title='src/localizations/index.js'>\n      <Line><Type>module</Type>.<Type>exports</Type> = {'{'}</Line>\n      <Line indent={1}>\n        <SafeKey text={primaryLang} />: <Func>require</Func>(<Str>'./{primaryLang}'</Str>),\n      </Line>\n      <Line indent={1}>\n        <SafeKey text={secondaryLang} />: <Func>require</Func>(<Str>'./{secondaryLang}'</Str>)\n      </Line>\n      <Line>{'}'}</Line>\n    </CodeDisplay>\n  )\n}\n\nexport default DictionaryIndexExample\n\nfunction SafeKey({ text }) {\n  if (text.match('-')) {\n    return <Str>'{text}'</Str>\n  } else {\n    return <Var>{text}</Var>\n  }\n}\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Com } from '~components/code-display'\n\nconst FolderStructure = () => (\n  <CodeDisplay title={localize('FOLDER_STRUCTURE')} mode='none'>\n    <Line>└─┬ src</Line>\n    <Line>  └─┬ localizations</Line>\n    <Line indent={1}>├── index.js</Line>\n    <Line indent={1}>├── {localize('DOCX_PRIMARY_LANG')}.js</Line>\n    <Line indent={1}>├── {localize('DOCX_SECONDARY_LANG')}.js</Line>\n    <Line indent={1}>└── ... <Com># {localize('DOC_BODY_YOU_MAY_ADD_MORE_FILES')}</Com></Line>\n  </CodeDisplay>\n)\n\nexport default FolderStructure\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Key, Com, Var, Def, Str, Func, Type } from '~components/code-display'\n\nconst HomeDemo = () => (\n  <CodeDisplay>\n    <Line>\n      <Key>import</Key> {'{'} <Var>localize</Var> {'}'} <Key>from</Key> <Str>'langutil'</Str>\n    </Line>\n    <Line>\n      <Def>let</Def> <Var>greet</Var> = <Func>localize</Func>(<Str>'HELLO_WORLD'</Str>)\n    </Line>\n    <Line>\n      <Type>console</Type>.<Func>log</Func>(<Var>greet</Var>)\n      <Com>{` // ${localize('DOCX_HELLO_WORLD_PRIMARY_VALUE')}`}</Com>\n    </Line>\n    <Line>\n      <Com>{`// ${localize('ITS_THAT_SIMPLE')}`}</Com>\n    </Line>\n  </CodeDisplay>\n)\n\nexport default HomeDemo\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line } from '~components/code-display'\n\nconst InstallUsingNpm = () => (\n  <CodeDisplay title={localize('USING_NPM')} mode='none'>\n    <Line>npm install langutil</Line>\n  </CodeDisplay>\n)\n\nexport default InstallUsingNpm","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line } from '~components/code-display'\n\nconst InstallUsingYarn = () => (\n  <CodeDisplay title={localize('USING_YARN')} mode='none'>\n    <Line>yarn add langutil</Line>\n  </CodeDisplay>\n)\n\nexport default InstallUsingYarn","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Com, Var, Str, Func, Type, Def } from '~components/code-display'\n\nconst ParamArray = () => {\n  const name1 = localize('DOCX_NAME_1')\n  const name2 = localize('DOCX_NAME_2')\n  return (\n    <CodeDisplay title={`${localize('IN_YOUR_OWN_FILE_COLON')}`}>\n      <Line>\n        <Def>let</Def> <Var>a</Var> = <Func>localize</Func>(<Str>'HELLO_NAME'</Str>, [<Str>'{name1}'</Str>])\n      </Line>\n      <Line>\n        <Type>console</Type>.<Func>log</Func>(<Var>a</Var>)\n        <Com>\n          {` // ${localize('DOCX_PARAM_ARR_HELLO_NAME_VALUE', [name1])}`}\n        </Com>\n      </Line>\n      <Line>\n        <Def>let</Def> <Var>b</Var> = <Func>localize</Func>(<Str>'HELLO_NAME_2'</Str>, [<Str>'{name1}'</Str>, <Str>'{name2}'</Str>])\n      </Line>\n      <Line>\n        <Type>console</Type>.<Func>log</Func>(<Var>b</Var>)\n        <Com>\n          {` // ${localize('DOCX_PARAM_ARR_HELLO_NAME_2_VALUE', [name1, name2])}`}\n        </Com>\n      </Line>\n    </CodeDisplay>\n  )\n}\n\nexport default ParamArray\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Str, Type, Var } from '~components/code-display'\n\nconst ParamArrayDictionary = () => (\n  <CodeDisplay title={`localizations/${localize('DOCX_PRIMARY_LANG')}.js`}>\n    <Line>\n      <Type>module</Type>.<Type>exports</Type> = {'{'}\n    </Line>\n    <Line indent={1}>\n      <Var>HELLO_NAME</Var>: <Str>'{localize('DOCX_PARAM_ARR_HELLO_NAME_RAW')}'</Str>,\n    </Line>\n    <Line indent={1}>\n      <Var>HELLO_NAME_2</Var>: <Str>'{localize('DOCX_PARAM_ARR_HELLO_NAME_2_RAW')}'</Str>\n    </Line>\n    <Line>{'}'}</Line>\n  </CodeDisplay>\n)\n\nexport default ParamArrayDictionary\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Com, Var, Str, Func, Type, Def } from '~components/code-display'\n\nconst ParamObject = () => {\n  const name1 = localize('DOCX_NAME_1')\n  const name2 = localize('DOCX_NAME_2')\n  return (\n    <CodeDisplay title={`${localize('IN_YOUR_OWN_FILE_COLON')}`}>\n      <Line>\n        <Def>let</Def> <Var>a</Var> = <Func>localize</Func>(<Str>'HELLO_NAME'</Str>, {'{ '}<Var>name1</Var>: <Str>'{name1}'</Str>{' }'})\n      </Line>\n      <Line>\n        <Type>console</Type>.<Func>log</Func>(<Var>a</Var>)\n        <Com>\n          {` // ${localize('DOCX_PARAM_OBJ_HELLO_NAME_VALUE', { name1 })}`}\n        </Com>\n      </Line>\n      <Line>\n        <Def>let</Def> <Var>b</Var> = <Func>localize</Func>(<Str>'HELLO_NAME_2'</Str>, {'{ '}<Var>name1</Var>: <Str>'{name1}'</Str>, <Var>name2</Var>: <Str>'{name2}'</Str>{' }'})\n      </Line>\n      <Line>\n        <Type>console</Type>.<Func>log</Func>(<Var>b</Var>)\n        <Com>\n          {` // ${localize('DOCX_PARAM_OBJ_HELLO_NAME_2_VALUE', { name1, name2 })}`}\n        </Com>\n      </Line>\n    </CodeDisplay>\n  )\n}\n\nexport default ParamObject\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Str, Type, Var } from '~components/code-display'\n\nconst ParamObjectDictionary = () => (\n  <CodeDisplay title={`localizations/${localize('DOCX_PRIMARY_LANG')}.js`}>\n    <Line>\n      <Type>module</Type>.<Type>exports</Type> = {'{'}\n    </Line>\n    <Line indent={1}>\n      <Var>HELLO_NAME</Var>: <Str>'{localize('DOCX_PARAM_OBJ_HELLO_NAME_RAW')}'</Str>,\n    </Line>\n    <Line indent={1}>\n      <Var>HELLO_NAME_2</Var>: <Str>'{localize('DOCX_PARAM_OBJ_HELLO_NAME_2_RAW')}'</Str>\n    </Line>\n    <Line>{'}'}</Line>\n  </CodeDisplay>\n)\n\nexport default ParamObjectDictionary\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Com, Key, Var, Str, Func, Type } from '~components/code-display'\n\nconst SwitchingLanguages = () => (\n  <CodeDisplay title={localize('SWITCHING_BETWEEN_LANGUAGES')}>\n    <Line>\n      <Key>import</Key> {'{'} <Var>setLanguage</Var> {'}'} <Key>from</Key> <Str>'langutil'</Str>\n    </Line>\n    <Line />\n    <Line>\n      <Type>console</Type>.<Func>log</Func>(<Func>localize</Func>(<Str>'HELLO_WORLD'</Str>))\n      <Com>{` // ${localize('DOCX_HELLO_WORLD_PRIMARY_VALUE')}`}</Com>\n    </Line>\n    <Line>\n      <Func>setLanguage</Func>(<Str>'{localize('DOCX_SECONDARY_LANG')}'</Str>)\n    </Line>\n    <Line>\n      <Type>console</Type>.<Func>log</Func>(<Func>localize</Func>(<Str>'HELLO_WORLD'</Str>))\n      <Com>{` // ${localize('DOCX_HELLO_WORLD_SECONDARY_VALUE')}`}</Com>\n    </Line>\n  </CodeDisplay>\n)\n\nexport default SwitchingLanguages\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Key, Com, Var, Str, Func, Type, Def, Rgx, Rgxe } from '~components/code-display'\n\nconst Transformations = () => {\n  return (\n    <CodeDisplay title={localize('APPLYING_TRANSFORMATION_TO_YOUR_LOC_STR')}>\n      <Line>\n        <Def>let</Def> <Var>transformed</Var> = <Func>localize</Func>({'{'}\n      </Line>\n      <Line indent={1}>\n        <Var>keyword</Var>: <Str>'HELLO_WORLD'</Str>,\n      </Line>\n      <Line indent={1}>\n        <Var>transform</Var>: (<Var>value</Var>) <Def>=></Def> {'{'}\n      </Line>\n      <Line indent={2}>\n        <Key>return</Key> <Var>value</Var>.<Func>replace</Func>(<Rgx>/<Rgxe>[</Rgxe>aeiou<Rgxe>]</Rgxe>/</Rgx><Def>gi</Def>, <Str>'*'</Str>)\n      </Line>\n      <Line indent={1}>\n        {'}'}\n      </Line>\n      <Line>\n        {'}'})\n      </Line>\n      <Line />\n      <Line>\n        <Type>console</Type>.<Func>log</Func>(<Var>transformed</Var>)\n        <Com>{` // ${localize({ keyword: 'DOCX_HELLO_WORLD_PRIMARY_VALUE', transform: val => val.replace(/[aeiou]/gi, '*') })}`}</Com>\n      </Line>\n    </CodeDisplay>\n  )\n}\n\nexport default Transformations\n","import React from 'react'\nimport { localize } from 'langutil'\nimport CodeDisplay, { Line, Com, Var, Str, Func, Type, Def } from '~components/code-display'\n\nconst Usage = () => (\n  <CodeDisplay title={localize('BASIC_USAGE')}>\n    <Line>\n      <Def>let</Def> <Var>greet</Var> = <Func>localize</Func>(<Str>'HELLO_WORLD'</Str>)\n    </Line>\n    <Line>\n      <Type>console</Type>.<Func>log</Func>(<Var>greet</Var>)\n      <Com>{` // ${localize('DOCX_HELLO_WORLD_PRIMARY_VALUE')}`}</Com>\n    </Line>\n  </CodeDisplay>\n)\n\nexport default Usage\n"],"sourceRoot":""}